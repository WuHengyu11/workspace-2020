<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.wolfcode.mapper.EmployeeMapper">
    <resultMap id="BaseResultMap" type="cn.wolfcode.domain.Employee">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="age" property="age" jdbcType="INTEGER"/>
        <result column="admin" property="admin" jdbcType="BIT"/>
        <result column="d_id" property="dept.id"/>
        <result column="d_name" property="dept.name"/>
        <result column="d_sn" property="dept.sn"/>
        <!--property属性名称 , select 要执行的sql语句     sqlj语句需要传递的参数-->
        <collection property="roles" select="cn.wolfcode.mapper.RoleMapper.selectForEmployeeId" column="id"/>
    </resultMap>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from employee
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <delete id="deleteRelation">
        delete from employee_role where employee_id = #{employee_id}
    </delete>
    <insert id="insert" parameterType="cn.wolfcode.domain.Employee" useGeneratedKeys="true" keyProperty="id">
    insert into employee (name, password, email, 
      age, admin, dept_id)
    values (#{name,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{age,jdbcType=INTEGER}, #{admin,jdbcType=BIT}, #{dept.id,jdbcType=BIGINT})
  </insert>
    <insert id="insertRelation">
        INSERT into employee_role  VALUES (#{employee_id},#{role_id})
    </insert>
    <insert id="insertRelation2">
         INSERT into employee_role  (employee_id,role_id) VALUES
         <foreach collection="role_id" item="role_id" separator=",">
             (#{employee_id},#{role_id})
         </foreach>
    </insert>
    <update id="updateByPrimaryKey" parameterType="cn.wolfcode.domain.Employee">
    update employee
    set name = #{name,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      age = #{age,jdbcType=INTEGER},
      admin = #{admin,jdbcType=BIT},
      dept_id = #{dept.id,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select e.id, e.name, e.password, e.email, e.age, e.admin, e.dept_id,d.id as d_id, d.name as d_name, d.sn as d_sn
        from employee e left join department d on e.dept_id = d.id
        where e.id = #{id}
  </select>
    <select id="selectAll" resultMap="BaseResultMap">
    select id, name, password, email, age, admin, dept_id
    from employee
  </select>
    <sql id="where_sql">
        <where>
            <if test="keyword != null">
                and (e.name like concat('%',#{keyword},'%') or e.email like concat('%',#{keyword},'%'))
            </if>
            <if test="dept_id != -1 and dept_id != null">
                and e.dept_id = #{deptid}
            </if>
        </where>
    </sql>

    <select id="selectForCount" resultType="java.lang.Integer">
        select count(*)
        from employee e
        <include refid="where_sql"/>
    </select>
    <select id="selectForList" resultMap="BaseResultMap">
        select e.id, e.name, e.password, e.email, e.age, e.admin, e.dept_id,d.id as d_id, d.name as d_name, d.sn as d_sn
        from employee e left join department d on e.dept_id = d.id
        <include refid="where_sql"/>

    </select>
    <select id="selectByUsernameAndPassword" resultType="cn.wolfcode.domain.Employee">
        select * from employee where name = #{username} and password = #{password}
    </select>
</mapper>