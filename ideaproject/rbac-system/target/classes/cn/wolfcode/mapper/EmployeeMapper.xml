<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.wolfcode.mapper.EmployeeMapper" >
  <resultMap id="BaseResultMap" type="cn.wolfcode.domain.Employee" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="age" property="age" jdbcType="INTEGER" />
    <result column="admin" property="admin" jdbcType="BIT" />
    <result column="d_id" property="dept.id" jdbcType="BIGINT" />
    <result column="d_name" property="dept.name"/>
    <result column="d_sn" property="dept.sn"/>
    <collection property="roles" select="cn.wolfcode.mapper.RoleMapper.selectByEmpId" column="id"/>
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from employee
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteRelation">
    delete from employee_role where employee_id = #{id};
  </delete>
  <insert id="insert" parameterType="cn.wolfcode.domain.Employee" useGeneratedKeys="true" keyProperty="id" >
    insert into employee (name, password, email, 
      age, admin, dept_id)
    values (#{name,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{age,jdbcType=INTEGER}, #{admin,jdbcType=BIT}, #{dept.id,jdbcType=BIGINT})
  </insert>
  <insert id="insertRelation">
    insert into employee_role (employee_id,role_id) values(#{eid},#{rid})
  </insert>
  <update id="updateByPrimaryKey" parameterType="cn.wolfcode.domain.Employee" >
    update employee
    set name = #{name,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      age = #{age,jdbcType=INTEGER},
      admin = #{admin,jdbcType=BIT},
      dept_id = #{dept.id,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
    <update id="updatePwd">
      update employee set password = #{password} where id = #{id}
    </update>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select id, name, password, email, age, admin, dept_id
    from employee
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select id, name, password, email, age, admin, dept_id
    from employee
  </select>
   <sql id="where_sql">
     <where>
       <if test="deptId != null and deptId != -1">
         and e.dept_id = #{deptId}
       </if>
       <if test="keyword != null">
         and (e.name like concat('%',#{keyword},'%') or e.email like concat('%',#{keyword},'%'))
       </if>
     </where>
   </sql>
    <select id="queryForCount" resultType="java.lang.Integer">
      select count(*)
       from employee as e
      <include refid="where_sql"></include>
    </select>
  <select id="queryForList" resultMap="BaseResultMap">
    select e.id, e.name, e.password, e.email, e.age, e.admin, e.dept_id,
    d.id as d_id,d.name as d_name,d.sn as d_sn
    from employee as e
    left join department d on e.dept_id = d.id
    <include refid="where_sql"></include>
    limit #{start},#{pageSize}
  </select>
  <select id="selectByusernameAndPassword" resultType="cn.wolfcode.domain.Employee">
     select * from employee where name = #{name} and password = #{password}
  </select>
</mapper>